// Package record provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package record

import (
	"context"
	"encoding/json"
	"fmt"
	"mime/multipart"
	"net/http"

	externalRef0 "backEnd/internal/inbound/http/v1/common"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// RecordCount defines model for RecordCount.
type RecordCount struct {
	Category string `json:"category"`
	Value    int64  `json:"value"`
}

// CreateRecordMultipartBody defines parameters for CreateRecord.
type CreateRecordMultipartBody struct {
	Category    string              `json:"category"`
	CreatedAt   string              `json:"createdAt"`
	DeductFrom  *string             `json:"deductFrom,omitempty"`
	Description *string             `json:"description,omitempty"`
	Image       *openapi_types.File `json:"image,omitempty"`
	Title       string              `json:"title"`
	Type        string              `json:"type"`
	Value       int64               `json:"value"`
}

// CreateRecordParams defines parameters for CreateRecord.
type CreateRecordParams struct {
	Authorization string `json:"Authorization"`
}

// DeleteRecordParams defines parameters for DeleteRecord.
type DeleteRecordParams struct {
	Authorization string `json:"Authorization"`
}

// GetRecordParams defines parameters for GetRecord.
type GetRecordParams struct {
	Authorization string `json:"Authorization"`
}

// UpdateRecordMultipartBody defines parameters for UpdateRecord.
type UpdateRecordMultipartBody struct {
	Category    string              `json:"category"`
	CreatedAt   string              `json:"createdAt"`
	DeductFrom  *string             `json:"deductFrom,omitempty"`
	Description *string             `json:"description,omitempty"`
	Image       *openapi_types.File `json:"image,omitempty"`
	Title       string              `json:"title"`
	Type        string              `json:"type"`
	Value       int64               `json:"value"`
}

// UpdateRecordParams defines parameters for UpdateRecord.
type UpdateRecordParams struct {
	Authorization string `json:"Authorization"`
}

// GetRecordsParams defines parameters for GetRecords.
type GetRecordsParams struct {
	StartDate     string  `form:"startDate" json:"startDate"`
	EndDate       string  `form:"endDate" json:"endDate"`
	Category      *string `form:"category,omitempty" json:"category,omitempty"`
	Type          *string `form:"type,omitempty" json:"type,omitempty"`
	DeductFrom    *string `form:"deductFrom,omitempty" json:"deductFrom,omitempty"`
	Limit         *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Page          *int    `form:"page,omitempty" json:"page,omitempty"`
	Authorization string  `json:"Authorization"`
}

// GetRecordTotalParams defines parameters for GetRecordTotal.
type GetRecordTotalParams struct {
	StartDate     string `form:"startDate" json:"startDate"`
	EndDate       string `form:"endDate" json:"endDate"`
	Authorization string `json:"Authorization"`
}

// GetRecordsByCategoryParams defines parameters for GetRecordsByCategory.
type GetRecordsByCategoryParams struct {
	StartDate     string  `form:"startDate" json:"startDate"`
	EndDate       string  `form:"endDate" json:"endDate"`
	Type          *string `form:"type,omitempty" json:"type,omitempty"`
	Authorization string  `json:"Authorization"`
}

// CreateRecordMultipartRequestBody defines body for CreateRecord for multipart/form-data ContentType.
type CreateRecordMultipartRequestBody CreateRecordMultipartBody

// UpdateRecordMultipartRequestBody defines body for UpdateRecord for multipart/form-data ContentType.
type UpdateRecordMultipartRequestBody UpdateRecordMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /record)
	CreateRecord(c *gin.Context, params CreateRecordParams)

	// (DELETE /record/{recordId})
	DeleteRecord(c *gin.Context, recordId string, params DeleteRecordParams)
	// Your GET endpoint
	// (GET /record/{recordId})
	GetRecord(c *gin.Context, recordId string, params GetRecordParams)

	// (PUT /record/{recordId})
	UpdateRecord(c *gin.Context, recordId string, params UpdateRecordParams)
	// Your GET endpoint
	// (GET /records)
	GetRecords(c *gin.Context, params GetRecordsParams)
	// Your GET endpoint
	// (GET /records/total)
	GetRecordTotal(c *gin.Context, params GetRecordTotalParams)
	// Your GET endpoint
	// (GET /records/type/count)
	GetRecordsByCategory(c *gin.Context, params GetRecordsByCategoryParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateRecord operation middleware
func (siw *ServerInterfaceWrapper) CreateRecord(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateRecordParams

	headers := c.Request.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = Authorization

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter Authorization is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateRecord(c, params)
}

// DeleteRecord operation middleware
func (siw *ServerInterfaceWrapper) DeleteRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "recordId" -------------
	var recordId string

	err = runtime.BindStyledParameterWithOptions("simple", "recordId", c.Param("recordId"), &recordId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recordId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteRecordParams

	headers := c.Request.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = Authorization

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter Authorization is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRecord(c, recordId, params)
}

// GetRecord operation middleware
func (siw *ServerInterfaceWrapper) GetRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "recordId" -------------
	var recordId string

	err = runtime.BindStyledParameterWithOptions("simple", "recordId", c.Param("recordId"), &recordId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recordId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecordParams

	headers := c.Request.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = Authorization

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter Authorization is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRecord(c, recordId, params)
}

// UpdateRecord operation middleware
func (siw *ServerInterfaceWrapper) UpdateRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "recordId" -------------
	var recordId string

	err = runtime.BindStyledParameterWithOptions("simple", "recordId", c.Param("recordId"), &recordId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recordId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateRecordParams

	headers := c.Request.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = Authorization

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter Authorization is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateRecord(c, recordId, params)
}

// GetRecords operation middleware
func (siw *ServerInterfaceWrapper) GetRecords(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecordsParams

	// ------------- Required query parameter "startDate" -------------

	if paramValue := c.Query("startDate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument startDate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "startDate", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startDate: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "endDate" -------------

	if paramValue := c.Query("endDate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument endDate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "endDate", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter endDate: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "category" -------------

	err = runtime.BindQueryParameter("form", true, false, "category", c.Request.URL.Query(), &params.Category)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "deductFrom" -------------

	err = runtime.BindQueryParameter("form", true, false, "deductFrom", c.Request.URL.Query(), &params.DeductFrom)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deductFrom: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = Authorization

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter Authorization is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRecords(c, params)
}

// GetRecordTotal operation middleware
func (siw *ServerInterfaceWrapper) GetRecordTotal(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecordTotalParams

	// ------------- Required query parameter "startDate" -------------

	if paramValue := c.Query("startDate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument startDate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "startDate", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startDate: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "endDate" -------------

	if paramValue := c.Query("endDate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument endDate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "endDate", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter endDate: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = Authorization

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter Authorization is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRecordTotal(c, params)
}

// GetRecordsByCategory operation middleware
func (siw *ServerInterfaceWrapper) GetRecordsByCategory(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecordsByCategoryParams

	// ------------- Required query parameter "startDate" -------------

	if paramValue := c.Query("startDate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument startDate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "startDate", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startDate: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "endDate" -------------

	if paramValue := c.Query("endDate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument endDate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "endDate", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter endDate: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = Authorization

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter Authorization is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRecordsByCategory(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/record", wrapper.CreateRecord)
	router.DELETE(options.BaseURL+"/record/:recordId", wrapper.DeleteRecord)
	router.GET(options.BaseURL+"/record/:recordId", wrapper.GetRecord)
	router.PUT(options.BaseURL+"/record/:recordId", wrapper.UpdateRecord)
	router.GET(options.BaseURL+"/records", wrapper.GetRecords)
	router.GET(options.BaseURL+"/records/total", wrapper.GetRecordTotal)
	router.GET(options.BaseURL+"/records/type/count", wrapper.GetRecordsByCategory)
}

type CreateRecordRequestObject struct {
	Params CreateRecordParams
	Body   *multipart.Reader
}

type CreateRecordResponseObject interface {
	VisitCreateRecordResponse(w http.ResponseWriter) error
}

type CreateRecord200JSONResponse externalRef0.BaseResponse

func (response CreateRecord200JSONResponse) VisitCreateRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateRecorddefaultJSONResponse struct {
	Body       externalRef0.BaseResponse
	StatusCode int
}

func (response CreateRecorddefaultJSONResponse) VisitCreateRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteRecordRequestObject struct {
	RecordId string `json:"recordId"`
	Params   DeleteRecordParams
}

type DeleteRecordResponseObject interface {
	VisitDeleteRecordResponse(w http.ResponseWriter) error
}

type DeleteRecord200JSONResponse externalRef0.BaseResponse

func (response DeleteRecord200JSONResponse) VisitDeleteRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRecorddefaultJSONResponse struct {
	Body       externalRef0.BaseResponse
	StatusCode int
}

func (response DeleteRecorddefaultJSONResponse) VisitDeleteRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRecordRequestObject struct {
	RecordId string `json:"recordId"`
	Params   GetRecordParams
}

type GetRecordResponseObject interface {
	VisitGetRecordResponse(w http.ResponseWriter) error
}

type GetRecord200JSONResponse externalRef0.Record

func (response GetRecord200JSONResponse) VisitGetRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRecorddefaultJSONResponse struct {
	Body       externalRef0.BaseResponse
	StatusCode int
}

func (response GetRecorddefaultJSONResponse) VisitGetRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateRecordRequestObject struct {
	RecordId string `json:"recordId"`
	Params   UpdateRecordParams
	Body     *multipart.Reader
}

type UpdateRecordResponseObject interface {
	VisitUpdateRecordResponse(w http.ResponseWriter) error
}

type UpdateRecord200JSONResponse externalRef0.BaseResponse

func (response UpdateRecord200JSONResponse) VisitUpdateRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRecorddefaultJSONResponse struct {
	Body       externalRef0.BaseResponse
	StatusCode int
}

func (response UpdateRecorddefaultJSONResponse) VisitUpdateRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRecordsRequestObject struct {
	Params GetRecordsParams
}

type GetRecordsResponseObject interface {
	VisitGetRecordsResponse(w http.ResponseWriter) error
}

type GetRecords200JSONResponse []externalRef0.Record

func (response GetRecords200JSONResponse) VisitGetRecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRecordsdefaultJSONResponse struct {
	Body       externalRef0.BaseResponse
	StatusCode int
}

func (response GetRecordsdefaultJSONResponse) VisitGetRecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRecordTotalRequestObject struct {
	Params GetRecordTotalParams
}

type GetRecordTotalResponseObject interface {
	VisitGetRecordTotalResponse(w http.ResponseWriter) error
}

type GetRecordTotal200JSONResponse struct {
	Expense int64 `json:"expense"`
	Income  int64 `json:"income"`
}

func (response GetRecordTotal200JSONResponse) VisitGetRecordTotalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRecordTotaldefaultJSONResponse struct {
	Body       externalRef0.BaseResponse
	StatusCode int
}

func (response GetRecordTotaldefaultJSONResponse) VisitGetRecordTotalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRecordsByCategoryRequestObject struct {
	Params GetRecordsByCategoryParams
}

type GetRecordsByCategoryResponseObject interface {
	VisitGetRecordsByCategoryResponse(w http.ResponseWriter) error
}

type GetRecordsByCategory200JSONResponse []RecordCount

func (response GetRecordsByCategory200JSONResponse) VisitGetRecordsByCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRecordsByCategorydefaultJSONResponse struct {
	Body       externalRef0.BaseResponse
	StatusCode int
}

func (response GetRecordsByCategorydefaultJSONResponse) VisitGetRecordsByCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /record)
	CreateRecord(ctx context.Context, request CreateRecordRequestObject) (CreateRecordResponseObject, error)

	// (DELETE /record/{recordId})
	DeleteRecord(ctx context.Context, request DeleteRecordRequestObject) (DeleteRecordResponseObject, error)
	// Your GET endpoint
	// (GET /record/{recordId})
	GetRecord(ctx context.Context, request GetRecordRequestObject) (GetRecordResponseObject, error)

	// (PUT /record/{recordId})
	UpdateRecord(ctx context.Context, request UpdateRecordRequestObject) (UpdateRecordResponseObject, error)
	// Your GET endpoint
	// (GET /records)
	GetRecords(ctx context.Context, request GetRecordsRequestObject) (GetRecordsResponseObject, error)
	// Your GET endpoint
	// (GET /records/total)
	GetRecordTotal(ctx context.Context, request GetRecordTotalRequestObject) (GetRecordTotalResponseObject, error)
	// Your GET endpoint
	// (GET /records/type/count)
	GetRecordsByCategory(ctx context.Context, request GetRecordsByCategoryRequestObject) (GetRecordsByCategoryResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateRecord operation middleware
func (sh *strictHandler) CreateRecord(ctx *gin.Context, params CreateRecordParams) {
	var request CreateRecordRequestObject

	request.Params = params

	if reader, err := ctx.Request.MultipartReader(); err == nil {
		request.Body = reader
	} else {
		ctx.Error(err)
		return
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRecord(ctx, request.(CreateRecordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRecord")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateRecordResponseObject); ok {
		if err := validResponse.VisitCreateRecordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteRecord operation middleware
func (sh *strictHandler) DeleteRecord(ctx *gin.Context, recordId string, params DeleteRecordParams) {
	var request DeleteRecordRequestObject

	request.RecordId = recordId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRecord(ctx, request.(DeleteRecordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRecord")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteRecordResponseObject); ok {
		if err := validResponse.VisitDeleteRecordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRecord operation middleware
func (sh *strictHandler) GetRecord(ctx *gin.Context, recordId string, params GetRecordParams) {
	var request GetRecordRequestObject

	request.RecordId = recordId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRecord(ctx, request.(GetRecordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRecord")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRecordResponseObject); ok {
		if err := validResponse.VisitGetRecordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateRecord operation middleware
func (sh *strictHandler) UpdateRecord(ctx *gin.Context, recordId string, params UpdateRecordParams) {
	var request UpdateRecordRequestObject

	request.RecordId = recordId
	request.Params = params

	if reader, err := ctx.Request.MultipartReader(); err == nil {
		request.Body = reader
	} else {
		ctx.Error(err)
		return
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateRecord(ctx, request.(UpdateRecordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateRecord")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateRecordResponseObject); ok {
		if err := validResponse.VisitUpdateRecordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRecords operation middleware
func (sh *strictHandler) GetRecords(ctx *gin.Context, params GetRecordsParams) {
	var request GetRecordsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRecords(ctx, request.(GetRecordsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRecords")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRecordsResponseObject); ok {
		if err := validResponse.VisitGetRecordsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRecordTotal operation middleware
func (sh *strictHandler) GetRecordTotal(ctx *gin.Context, params GetRecordTotalParams) {
	var request GetRecordTotalRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRecordTotal(ctx, request.(GetRecordTotalRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRecordTotal")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRecordTotalResponseObject); ok {
		if err := validResponse.VisitGetRecordTotalResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRecordsByCategory operation middleware
func (sh *strictHandler) GetRecordsByCategory(ctx *gin.Context, params GetRecordsByCategoryParams) {
	var request GetRecordsByCategoryRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRecordsByCategory(ctx, request.(GetRecordsByCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRecordsByCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRecordsByCategoryResponseObject); ok {
		if err := validResponse.VisitGetRecordsByCategoryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
