// Package quest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package quest

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	externalRef0 "backEnd/internal/inbound/http/v1/common"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// Quest defines model for Quest.
type Quest struct {
	Cooldown    int    `json:"cooldown"`
	Count       int    `json:"count"`
	Description string `json:"description"`
	Id          string `json:"id"`
	Limit       int    `json:"limit"`
	Reward      int    `json:"reward"`
	Status      bool   `json:"status"`
	Title       string `json:"title"`
}

// GetQuestsParams defines parameters for GetQuests.
type GetQuestsParams struct {
	Authorization string `json:"Authorization"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /quest/{id}/claim)
	ClaimQuest(c *gin.Context, id string)
	// Your GET endpoint
	// (GET /quests)
	GetQuests(c *gin.Context, params GetQuestsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ClaimQuest operation middleware
func (siw *ServerInterfaceWrapper) ClaimQuest(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ClaimQuest(c, id)
}

// GetQuests operation middleware
func (siw *ServerInterfaceWrapper) GetQuests(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetQuestsParams

	headers := c.Request.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = Authorization

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter Authorization is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetQuests(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/quest/:id/claim", wrapper.ClaimQuest)
	router.GET(options.BaseURL+"/quests", wrapper.GetQuests)
}

type ClaimQuestRequestObject struct {
	Id string `json:"id"`
}

type ClaimQuestResponseObject interface {
	VisitClaimQuestResponse(w http.ResponseWriter) error
}

type ClaimQuest200JSONResponse externalRef0.BaseResponse

func (response ClaimQuest200JSONResponse) VisitClaimQuestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClaimQuestdefaultJSONResponse struct {
	Body       externalRef0.BaseResponse
	StatusCode int
}

func (response ClaimQuestdefaultJSONResponse) VisitClaimQuestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetQuestsRequestObject struct {
	Params GetQuestsParams
}

type GetQuestsResponseObject interface {
	VisitGetQuestsResponse(w http.ResponseWriter) error
}

type GetQuests200JSONResponse []Quest

func (response GetQuests200JSONResponse) VisitGetQuestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetQuestsdefaultJSONResponse struct {
	Body       externalRef0.BaseResponse
	StatusCode int
}

func (response GetQuestsdefaultJSONResponse) VisitGetQuestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /quest/{id}/claim)
	ClaimQuest(ctx context.Context, request ClaimQuestRequestObject) (ClaimQuestResponseObject, error)
	// Your GET endpoint
	// (GET /quests)
	GetQuests(ctx context.Context, request GetQuestsRequestObject) (GetQuestsResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ClaimQuest operation middleware
func (sh *strictHandler) ClaimQuest(ctx *gin.Context, id string) {
	var request ClaimQuestRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClaimQuest(ctx, request.(ClaimQuestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClaimQuest")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ClaimQuestResponseObject); ok {
		if err := validResponse.VisitClaimQuestResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetQuests operation middleware
func (sh *strictHandler) GetQuests(ctx *gin.Context, params GetQuestsParams) {
	var request GetQuestsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetQuests(ctx, request.(GetQuestsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetQuests")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetQuestsResponseObject); ok {
		if err := validResponse.VisitGetQuestsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
