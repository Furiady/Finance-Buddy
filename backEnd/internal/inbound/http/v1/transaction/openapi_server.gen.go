// Package transaction provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package transaction

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	externalRef0 "backEnd/internal/inbound/http/v1/common"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// CreateTransactionJSONBody defines parameters for CreateTransaction.
type CreateTransactionJSONBody struct {
	Category    string  `json:"category"`
	CreatedAt   string  `json:"createdAt"`
	Description *string `json:"description,omitempty"`
	Title       string  `json:"title"`
	Type        string  `json:"type"`
	Value       int64   `json:"value"`
}

// UpdateTransactionJSONBody defines parameters for UpdateTransaction.
type UpdateTransactionJSONBody struct {
	Category    string  `json:"category"`
	CreatedAt   string  `json:"createdAt"`
	Description *string `json:"description,omitempty"`
	Title       string  `json:"title"`
	Type        string  `json:"type"`
	Value       int64   `json:"value"`
}

// GetTransactionsParams defines parameters for GetTransactions.
type GetTransactionsParams struct {
	StartDate string  `form:"startDate" json:"startDate"`
	EndDate   string  `form:"endDate" json:"endDate"`
	Category  *string `form:"category,omitempty" json:"category,omitempty"`
	Type      *string `form:"type,omitempty" json:"type,omitempty"`
}

// GetTransactionsByCategoryParams defines parameters for GetTransactionsByCategory.
type GetTransactionsByCategoryParams struct {
	StartDate string  `form:"startDate" json:"startDate"`
	EndDate   string  `form:"endDate" json:"endDate"`
	Type      *string `form:"type,omitempty" json:"type,omitempty"`
}

// CreateTransactionJSONRequestBody defines body for CreateTransaction for application/json ContentType.
type CreateTransactionJSONRequestBody CreateTransactionJSONBody

// UpdateTransactionJSONRequestBody defines body for UpdateTransaction for application/json ContentType.
type UpdateTransactionJSONRequestBody UpdateTransactionJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /transaction)
	CreateTransaction(c *gin.Context)

	// (DELETE /transaction/{transactionId})
	DeleteTransaction(c *gin.Context, transactionId string)
	// Your GET endpoint
	// (GET /transaction/{transactionId})
	GetTransaction(c *gin.Context, transactionId string)

	// (PUT /transaction/{transactionId})
	UpdateTransaction(c *gin.Context, transactionId string)
	// Your GET endpoint
	// (GET /transactions)
	GetTransactions(c *gin.Context, params GetTransactionsParams)
	// Your GET endpoint
	// (GET /transactions/category)
	GetTransactionsByCategory(c *gin.Context, params GetTransactionsByCategoryParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateTransaction operation middleware
func (siw *ServerInterfaceWrapper) CreateTransaction(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTransaction(c)
}

// DeleteTransaction operation middleware
func (siw *ServerInterfaceWrapper) DeleteTransaction(c *gin.Context) {

	var err error

	// ------------- Path parameter "transactionId" -------------
	var transactionId string

	err = runtime.BindStyledParameterWithOptions("simple", "transactionId", c.Param("transactionId"), &transactionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter transactionId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTransaction(c, transactionId)
}

// GetTransaction operation middleware
func (siw *ServerInterfaceWrapper) GetTransaction(c *gin.Context) {

	var err error

	// ------------- Path parameter "transactionId" -------------
	var transactionId string

	err = runtime.BindStyledParameterWithOptions("simple", "transactionId", c.Param("transactionId"), &transactionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter transactionId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTransaction(c, transactionId)
}

// UpdateTransaction operation middleware
func (siw *ServerInterfaceWrapper) UpdateTransaction(c *gin.Context) {

	var err error

	// ------------- Path parameter "transactionId" -------------
	var transactionId string

	err = runtime.BindStyledParameterWithOptions("simple", "transactionId", c.Param("transactionId"), &transactionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter transactionId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateTransaction(c, transactionId)
}

// GetTransactions operation middleware
func (siw *ServerInterfaceWrapper) GetTransactions(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionsParams

	// ------------- Required query parameter "startDate" -------------

	if paramValue := c.Query("startDate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument startDate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "startDate", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startDate: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "endDate" -------------

	if paramValue := c.Query("endDate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument endDate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "endDate", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter endDate: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "category" -------------

	err = runtime.BindQueryParameter("form", true, false, "category", c.Request.URL.Query(), &params.Category)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTransactions(c, params)
}

// GetTransactionsByCategory operation middleware
func (siw *ServerInterfaceWrapper) GetTransactionsByCategory(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionsByCategoryParams

	// ------------- Required query parameter "startDate" -------------

	if paramValue := c.Query("startDate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument startDate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "startDate", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startDate: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "endDate" -------------

	if paramValue := c.Query("endDate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument endDate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "endDate", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter endDate: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTransactionsByCategory(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/transaction", wrapper.CreateTransaction)
	router.DELETE(options.BaseURL+"/transaction/:transactionId", wrapper.DeleteTransaction)
	router.GET(options.BaseURL+"/transaction/:transactionId", wrapper.GetTransaction)
	router.PUT(options.BaseURL+"/transaction/:transactionId", wrapper.UpdateTransaction)
	router.GET(options.BaseURL+"/transactions", wrapper.GetTransactions)
	router.GET(options.BaseURL+"/transactions/category", wrapper.GetTransactionsByCategory)
}

type CreateTransactionRequestObject struct {
	Body *CreateTransactionJSONRequestBody
}

type CreateTransactionResponseObject interface {
	VisitCreateTransactionResponse(w http.ResponseWriter) error
}

type CreateTransaction200JSONResponse externalRef0.BaseResponse

func (response CreateTransaction200JSONResponse) VisitCreateTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateTransactiondefaultJSONResponse struct {
	Body       externalRef0.BaseResponse
	StatusCode int
}

func (response CreateTransactiondefaultJSONResponse) VisitCreateTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteTransactionRequestObject struct {
	TransactionId string `json:"transactionId"`
}

type DeleteTransactionResponseObject interface {
	VisitDeleteTransactionResponse(w http.ResponseWriter) error
}

type DeleteTransaction200JSONResponse externalRef0.BaseResponse

func (response DeleteTransaction200JSONResponse) VisitDeleteTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTransactiondefaultJSONResponse struct {
	Body       externalRef0.BaseResponse
	StatusCode int
}

func (response DeleteTransactiondefaultJSONResponse) VisitDeleteTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetTransactionRequestObject struct {
	TransactionId string `json:"transactionId"`
}

type GetTransactionResponseObject interface {
	VisitGetTransactionResponse(w http.ResponseWriter) error
}

type GetTransaction200JSONResponse externalRef0.Transaction

func (response GetTransaction200JSONResponse) VisitGetTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactiondefaultJSONResponse struct {
	Body       externalRef0.BaseResponse
	StatusCode int
}

func (response GetTransactiondefaultJSONResponse) VisitGetTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateTransactionRequestObject struct {
	TransactionId string `json:"transactionId"`
	Body          *UpdateTransactionJSONRequestBody
}

type UpdateTransactionResponseObject interface {
	VisitUpdateTransactionResponse(w http.ResponseWriter) error
}

type UpdateTransaction200JSONResponse externalRef0.BaseResponse

func (response UpdateTransaction200JSONResponse) VisitUpdateTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTransactiondefaultJSONResponse struct {
	Body       externalRef0.BaseResponse
	StatusCode int
}

func (response UpdateTransactiondefaultJSONResponse) VisitUpdateTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetTransactionsRequestObject struct {
	Params GetTransactionsParams
}

type GetTransactionsResponseObject interface {
	VisitGetTransactionsResponse(w http.ResponseWriter) error
}

type GetTransactions200JSONResponse []externalRef0.Transaction

func (response GetTransactions200JSONResponse) VisitGetTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionsdefaultJSONResponse struct {
	Body       externalRef0.BaseResponse
	StatusCode int
}

func (response GetTransactionsdefaultJSONResponse) VisitGetTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetTransactionsByCategoryRequestObject struct {
	Params GetTransactionsByCategoryParams
}

type GetTransactionsByCategoryResponseObject interface {
	VisitGetTransactionsByCategoryResponse(w http.ResponseWriter) error
}

type GetTransactionsByCategory200JSONResponse []struct {
	Category string `json:"category"`
	Value    int64  `json:"value"`
}

func (response GetTransactionsByCategory200JSONResponse) VisitGetTransactionsByCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionsByCategorydefaultJSONResponse struct {
	Body       externalRef0.BaseResponse
	StatusCode int
}

func (response GetTransactionsByCategorydefaultJSONResponse) VisitGetTransactionsByCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /transaction)
	CreateTransaction(ctx context.Context, request CreateTransactionRequestObject) (CreateTransactionResponseObject, error)

	// (DELETE /transaction/{transactionId})
	DeleteTransaction(ctx context.Context, request DeleteTransactionRequestObject) (DeleteTransactionResponseObject, error)
	// Your GET endpoint
	// (GET /transaction/{transactionId})
	GetTransaction(ctx context.Context, request GetTransactionRequestObject) (GetTransactionResponseObject, error)

	// (PUT /transaction/{transactionId})
	UpdateTransaction(ctx context.Context, request UpdateTransactionRequestObject) (UpdateTransactionResponseObject, error)
	// Your GET endpoint
	// (GET /transactions)
	GetTransactions(ctx context.Context, request GetTransactionsRequestObject) (GetTransactionsResponseObject, error)
	// Your GET endpoint
	// (GET /transactions/category)
	GetTransactionsByCategory(ctx context.Context, request GetTransactionsByCategoryRequestObject) (GetTransactionsByCategoryResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateTransaction operation middleware
func (sh *strictHandler) CreateTransaction(ctx *gin.Context) {
	var request CreateTransactionRequestObject

	var body CreateTransactionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTransaction(ctx, request.(CreateTransactionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTransaction")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateTransactionResponseObject); ok {
		if err := validResponse.VisitCreateTransactionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTransaction operation middleware
func (sh *strictHandler) DeleteTransaction(ctx *gin.Context, transactionId string) {
	var request DeleteTransactionRequestObject

	request.TransactionId = transactionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTransaction(ctx, request.(DeleteTransactionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTransaction")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteTransactionResponseObject); ok {
		if err := validResponse.VisitDeleteTransactionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTransaction operation middleware
func (sh *strictHandler) GetTransaction(ctx *gin.Context, transactionId string) {
	var request GetTransactionRequestObject

	request.TransactionId = transactionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTransaction(ctx, request.(GetTransactionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTransaction")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTransactionResponseObject); ok {
		if err := validResponse.VisitGetTransactionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateTransaction operation middleware
func (sh *strictHandler) UpdateTransaction(ctx *gin.Context, transactionId string) {
	var request UpdateTransactionRequestObject

	request.TransactionId = transactionId

	var body UpdateTransactionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTransaction(ctx, request.(UpdateTransactionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTransaction")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateTransactionResponseObject); ok {
		if err := validResponse.VisitUpdateTransactionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTransactions operation middleware
func (sh *strictHandler) GetTransactions(ctx *gin.Context, params GetTransactionsParams) {
	var request GetTransactionsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTransactions(ctx, request.(GetTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTransactionsResponseObject); ok {
		if err := validResponse.VisitGetTransactionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTransactionsByCategory operation middleware
func (sh *strictHandler) GetTransactionsByCategory(ctx *gin.Context, params GetTransactionsByCategoryParams) {
	var request GetTransactionsByCategoryRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTransactionsByCategory(ctx, request.(GetTransactionsByCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTransactionsByCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTransactionsByCategoryResponseObject); ok {
		if err := validResponse.VisitGetTransactionsByCategoryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
