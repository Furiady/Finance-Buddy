// Package theme provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package theme

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	externalRef0 "backEnd/internal/inbound/http/v1/common"

	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// BuyThemeJSONBody defines parameters for BuyTheme.
type BuyThemeJSONBody struct {
	ThemeId string `json:"themeId"`
}

// BuyThemeJSONRequestBody defines body for BuyTheme for application/json ContentType.
type BuyThemeJSONRequestBody BuyThemeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /theme)
	BuyTheme(c *gin.Context)
	// Your GET endpoint
	// (GET /themes)
	GetAll(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// BuyTheme operation middleware
func (siw *ServerInterfaceWrapper) BuyTheme(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BuyTheme(c)
}

// GetAll operation middleware
func (siw *ServerInterfaceWrapper) GetAll(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAll(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/theme", wrapper.BuyTheme)
	router.GET(options.BaseURL+"/themes", wrapper.GetAll)
}

type BuyThemeRequestObject struct {
	Body *BuyThemeJSONRequestBody
}

type BuyThemeResponseObject interface {
	VisitBuyThemeResponse(w http.ResponseWriter) error
}

type BuyTheme200JSONResponse externalRef0.BaseResponse

func (response BuyTheme200JSONResponse) VisitBuyThemeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type BuyThemedefaultJSONResponse struct {
	Body       externalRef0.BaseResponse
	StatusCode int
}

func (response BuyThemedefaultJSONResponse) VisitBuyThemeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAllRequestObject struct {
}

type GetAllResponseObject interface {
	VisitGetAllResponse(w http.ResponseWriter) error
}

type GetAll200JSONResponse []externalRef0.Theme

func (response GetAll200JSONResponse) VisitGetAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAlldefaultJSONResponse struct {
	Body       externalRef0.BaseResponse
	StatusCode int
}

func (response GetAlldefaultJSONResponse) VisitGetAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /theme)
	BuyTheme(ctx context.Context, request BuyThemeRequestObject) (BuyThemeResponseObject, error)
	// Your GET endpoint
	// (GET /themes)
	GetAll(ctx context.Context, request GetAllRequestObject) (GetAllResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// BuyTheme operation middleware
func (sh *strictHandler) BuyTheme(ctx *gin.Context) {
	var request BuyThemeRequestObject

	var body BuyThemeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.BuyTheme(ctx, request.(BuyThemeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "BuyTheme")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(BuyThemeResponseObject); ok {
		if err := validResponse.VisitBuyThemeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAll operation middleware
func (sh *strictHandler) GetAll(ctx *gin.Context) {
	var request GetAllRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAll(ctx, request.(GetAllRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAll")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllResponseObject); ok {
		if err := validResponse.VisitGetAllResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
