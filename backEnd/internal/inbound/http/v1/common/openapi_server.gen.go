// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package common

import (
	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Accessory defines model for Accessory.
type Accessory struct {
	Id     string `json:"id"`
	Name   string `json:"name"`
	Path   string `json:"path"`
	Price  int    `json:"price"`
	Status bool   `json:"status"`
}

// BaseResponse defines model for BaseResponse.
type BaseResponse struct {
	Message   string `json:"message"`
	Timestamp string `json:"timestamp"`
}

// Pet defines model for Pet.
type Pet struct {
	Id     string `json:"id"`
	Name   string `json:"name"`
	Path   string `json:"path"`
	Price  int    `json:"price"`
	Status bool   `json:"status"`
}

// Quest defines model for Quest.
type Quest struct {
	Cooldown    int    `json:"cooldown"`
	Description string `json:"description"`
	Id          string `json:"id"`
	Reward      int    `json:"reward"`
	Status      bool   `json:"status"`
	Title       string `json:"title"`
	UpdatedAt   string `json:"updatedAt"`
}

// Theme defines model for Theme.
type Theme struct {
	Id     string `json:"id"`
	Name   string `json:"name"`
	Path   string `json:"path"`
	Price  int    `json:"price"`
	Status bool   `json:"status"`
}

// Transaction defines model for Transaction.
type Transaction struct {
	Category    string `json:"category"`
	CreatedAt   string `json:"createdAt"`
	Description string `json:"description"`
	Id          string `json:"id"`
	Title       string `json:"title"`
	Type        string `json:"type"`
	Url         string `json:"url"`
	Value       int64  `json:"value"`
}

// User defines model for User.
type User struct {
	Balance  int64               `json:"balance"`
	Coin     int                 `json:"coin"`
	Email    openapi_types.Email `json:"email"`
	Id       string              `json:"id"`
	Pin      string              `json:"pin"`
	Username string              `json:"username"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {

}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}
